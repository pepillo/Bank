@model Bank.ViewModels.Loans_RequestLoan_VM
@using DropDownList;

@{
    ViewBag.Title = "Loan";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="bank-header">Bank - Apply For Loan</div>

    <div class="form-horizontal  form-gray-box">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="bank-title"><i class="fa fa-user"></i> Personal Information</div>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.SocialSecurity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.SocialSecurity, new { htmlAttributes = new { @class = "ssn form-control" } })
                @Html.ValidationMessageFor(model => model.SocialSecurity, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.Income, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                <div class="input-group">
                    <span class="input-group-addon">$</span>
                    @Html.EditorFor(model => model.Income, new { htmlAttributes = new { @class = "form-control", type = "Number", min = "0", step = "1", data_number_to_fixed = "2", data_number_stepfactor = "1000" } })
                </div>
                @Html.ValidationMessageFor(model => model.Income, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="bank-title"><i class="fa fa-briefcase"></i> Income Information</div>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.Employer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Employer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Employer, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.JobTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.JobTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.JobTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmploymentType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.EmploymentType, DropDownList.EmploymentTypes(), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.EmploymentType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="bank-title"><i class="fa fa-money"></i> Loan Information</div>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.LoanType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @{
                    var TypeSelected = string.IsNullOrEmpty(Request.Params["TypeLoan"]) ? "" : Request.Params["TypeLoan"];

                    var LoanTypeList = DropDownList.LoanTypes();

                    var selected = LoanTypeList.Where(x => x.Value == TypeSelected).FirstOrDefault();

                    if (selected != null) { selected.Selected = true; }
                }
                @Html.DropDownListFor(model => model.LoanType, LoanTypeList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LoanType, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.Terms, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @{
                    List<SelectListItem> TermsItems = new List<SelectListItem>();
                    TermsItems.Add(new SelectListItem { Text = "Select Loan Term ...", Value = "" });
                    TermsItems.Add(new SelectListItem { Text = "1 Year (12 Months)", Value = "12" });
                    TermsItems.Add(new SelectListItem { Text = "2 Year (24 Months)", Value = "24" });
                    TermsItems.Add(new SelectListItem { Text = "3 Year (36 Months)", Value = "36" });
                    TermsItems.Add(new SelectListItem { Text = "5 Year (60 Months)", Value = "60" });
                }

                @Html.DropDownListFor(model => model.Terms, TermsItems, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Terms, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                <div class="input-group">
                    <span class="input-group-addon">$</span>
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", type = "Number", min = "0", step = "5", data_number_to_fixed = "2", data_number_stepfactor = "100" } })
                </div>
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.DownPayment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                <div class="input-group">
                    <span class="input-group-addon">$</span>
                    @Html.EditorFor(model => model.DownPayment, new { htmlAttributes = new { @class = "form-control", type = "Number", min = "0", step = "5", data_number_to_fixed = "2", data_number_stepfactor = "100" } })
                </div>
                @Html.ValidationMessageFor(model => model.DownPayment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Apply" class="btn bank-yellow-btn" />
            </div>
        </div>
    </div>
}
