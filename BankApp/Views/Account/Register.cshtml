@model Bank.ViewModels.Account_Register_VM

@{
    ViewBag.Title = "Register";
}

<div class="bank-header">Bank - Register</div>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal form-gray-box">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <!--JDR: Register success message-->
    @if (ViewBag.Message != null)
    {
        <div class="form-group">
            <div class="col-md-10">
                @ViewBag.Message
            </div>
        </div>
    }

    <div class="form-group">
        <!--JDR: Set lable for all name fields-->
        <label class="control-label col-md-2" for="FirstName">Name</label>
        <!--@Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })-->
        <!--JDR: Set input for all name fields-->
        <div class="col-md-3">
            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "First Name" } })     <!--JDR: Had to hardecode placeholder, would prefeer to use the DisplayName in model-->
        </div>
        <div class="col-md-1">
            @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control", placeholder = "I." } })            <!--JDR: Had to hardecode placeholder, would prefeer to use the DisplayName in model-->
        </div>
        <div class="col-md-3">
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Last Name" } })       <!--JDR: Had to hardecode placeholder, would prefeer to use the DisplayName in model-->
        </div>

        <label class="control-label col-md-1" for="FirstName">Phone</label>

        <div class="col-md-2">
            @Html.EditorFor(model => model.Telephone, new { htmlAttributes = new { @class = "phone form-control" } })
        </div>
        <!--JDR: Set validation for all name fields-->
        <div class="col-md-10  col-md-offset-2 text-danger">
            @Html.ValidationMessageFor(model => model.FirstName, "", new { })
            @Html.ValidationMessageFor(model => model.MiddleName, "", new { })
            @Html.ValidationMessageFor(model => model.LastName, "", new { })
            @Html.ValidationMessageFor(model => model.Telephone, "", new { })
        </div>
    </div>

    <div class="form-group">
        <!--JDR: Set lable for all address fields-->
        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
        <!--JDR: Set input for all address fields-->
        <div class="col-md-10">
            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Address" } })      <!--JDR: Had to hardecode placeholder, would prefeer to use the DisplayName in model-->
        </div>
        <div class="col-md-4 col-md-offset-2">
            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", placeholder = "City" } })      <!--JDR: Had to hardecode placeholder, would prefeer to use the DisplayName in model-->
        </div>
        <div class="col-md-4">
            @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", placeholder = "State" } })      <!--JDR: Had to hardecode placeholder, would prefeer to use the DisplayName in model-->
        </div>
        <div class="col-md-2">
            @Html.EditorFor(model => model.Zip, new { htmlAttributes = new { @class = "form-control", placeholder = "Zip" } })      <!--JDR: Had to hardecode placeholder, would prefeer to use the DisplayName in model-->
        </div>

        <!--JDR: Set validation for all name fields-->
        <div class="col-md-10  col-md-offset-2 text-danger">
            @Html.ValidationMessageFor(model => model.Address, "", new { })
            @Html.ValidationMessageFor(model => model.City, "", new { })
            @Html.ValidationMessageFor(model => model.State, "", new { })
            @Html.ValidationMessageFor(model => model.Zip, "", new { })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="row">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Register" class="btn bank-yellow-btn" />
        </div>
    </div>
</div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
